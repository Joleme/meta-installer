From f874e0a129a09936711033f26ebbbe7a0df94e2b Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Wed, 15 Apr 2015 15:44:56 +0800
Subject: [PATCH] support authentication for kickstart

While download kickstart file from web server,
we support basic/digest authentication.

Add KickstartAuthError to report authentication failure,
which the invoker could parse this specific error.

Upstream-Status: inappropriate [wr-installer specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pykickstart/errors.py | 19 +++++++++++++++++++
 pykickstart/parser.py | 12 +++++++++---
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/pykickstart/errors.py b/pykickstart/errors.py
index a234d99..7155573 100644
--- a/pykickstart/errors.py
+++ b/pykickstart/errors.py
@@ -35,6 +35,10 @@ It also exports several exception classes:
 
     KickstartVersionError - An exception for errors relating to unsupported
                             syntax versions.
+
+    KickstartAuthError - An exception for errors relating to authentication
+                         failed while downloading kickstart from web server
+
 """
 import gettext
 _ = lambda x: gettext.ldgettext("pykickstart", x)
@@ -101,3 +105,18 @@ class KickstartVersionError(KickstartError):
 
     def __str__ (self):
         return self.value
+
+class KickstartAuthError(KickstartError):
+    """An exception for errors relating to authentication failed while
+       downloading kickstart from web server
+    """
+    def __init__(self, msg):
+        """Create a new KickstartAuthError exception instance with the
+           descriptive message val.  val should be the return value of
+           formatErrorMsg.
+        """
+        KickstartError.__init__(self, msg)
+
+    def __str__(self):
+        return self.value
+
diff --git a/pykickstart/parser.py b/pykickstart/parser.py
index a54bf3b..d4d566b 100644
--- a/pykickstart/parser.py
+++ b/pykickstart/parser.py
@@ -44,7 +44,7 @@ import urlgrabber.grabber as grabber
 from snack import *
 
 import constants
-from errors import KickstartError, KickstartParseError, KickstartValueError, formatErrorMsg
+from errors import KickstartError, KickstartParseError, KickstartValueError, formatErrorMsg, KickstartAuthError
 from ko import KickstartObject
 from sections import *
 import version
@@ -676,7 +676,7 @@ class KickstartParser:
         i = PutBackIterator(s.splitlines(True) + [""])
         self._stateMachine (i)
 
-    def readKickstart(self, f, reset=True):
+    def readKickstart(self, f, reset=True, username=None, password=None):
         """Process a kickstart file, given by the filename f."""
         if reset:
             self._reset()
@@ -701,7 +701,7 @@ class KickstartParser:
         i = 0
         while i < 45:
             try:
-                s = urlread(f, timeout=2)
+                s = urlread(f, timeout=2, username=username, password=password)
                 wait_wind.pop()
                 break
             except grabber.URLGrabError, e:
@@ -712,6 +712,12 @@ class KickstartParser:
                     i+=1
                     wait_wind.refresh("Try %s times" % i)
                     sleep(1)
+                elif e.errno == 14 and e.code == 22 and \
+                  "401" in e.exception[1]:
+                    wait_wind.pop()
+                    raise KickstartAuthError, formatErrorMsg(0, msg=_("Unable to download kickstart file: %s") % e.strerror)
+                    break
+
                 # Break if other failure
                 else:
                     wait_wind.pop()
-- 
1.9.1

