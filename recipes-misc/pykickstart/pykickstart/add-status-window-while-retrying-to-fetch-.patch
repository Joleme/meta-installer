From e5ef03cf3425a09e9014b67251ba08a91b392806 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Mon, 11 Apr 2016 03:49:11 -0400
Subject: [PATCH 2/3] parser.py: add status window while retrying to fetch
 kickstart

While the retry occurs the user might think the system has hung.
So we add a status window that indicates the system is trying to
connect to the network and retrieve the kickstart file.

Upstream-Status: inappropriate [wr-installer specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pykickstart/parser.py | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/pykickstart/parser.py b/pykickstart/parser.py
index 5d1dfdd..f2285d6 100644
--- a/pykickstart/parser.py
+++ b/pykickstart/parser.py
@@ -39,6 +39,7 @@ import tempfile
 from optparse import OptionParser
 from urlgrabber import urlread
 import urlgrabber.grabber as grabber
+from snack import *
 import warnings
 
 from pykickstart import constants, version
@@ -742,11 +743,13 @@ class KickstartParser:
             cd = os.path.abspath(cd)
         self.currentdir[self._includeDepth] = cd
 
+        wait_wind = WaitWindow("Downloading %s" % f, "Please wait...")
         # Retry 45 times, wait 45s~135s
         i = 0
         while i < 45:
             try:
                 s = urlread(f, timeout=2)
+                wait_wind.pop()
                 break
             except grabber.URLGrabError, e:
                 # Continue while timeout or couldn't connect
@@ -760,6 +763,7 @@ class KickstartParser:
                     raise KickstartError, formatErrorMsg(0, msg=_("Unable to open input kickstart file: %s") % e.strerror)
                     break
         else:
+            wait_wind.pop()
             raise KickstartError(formatErrorMsg(0, msg=_("Unable to open input kickstart file: %s") % e.strerror))
 
         self.readKickstartFromString(s, reset=False)
@@ -782,3 +786,25 @@ class KickstartParser:
         # but shouldn't error on.
         self.registerSection(NullSection(self.handler, sectionOpen="%addon"))
         self.registerSection(NullSection(self.handler, sectionOpen="%anaconda"))
+
+class WaitWindow:
+    def pop(self):
+        self.screen.popWindow()
+        self.screen.finish()
+
+    def refresh(self, text):
+        self.t.setText(text)
+        self.screen.refresh()
+
+    def __init__(self, title, text):
+        width = 40
+        if (len(text) < width): width = len(text)
+
+        self.t = TextboxReflowed(width, text)
+
+        self.screen = SnackScreen()
+        g = GridForm(self.screen, title, 1, 1)
+        g.add(self.t, 0, 0)
+        g.draw()
+
+        self.screen.refresh()
-- 
1.9.1

