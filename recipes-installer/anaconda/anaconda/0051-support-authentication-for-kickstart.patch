From af35fb8ad6e1d4e9e2427b357ef798b6b2ef3c82 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 11 Nov 2016 22:02:03 -0500
Subject: [PATCH] support authentication for kickstart

We add option 'ksuser' and 'kspasswd' in /proc/cmdline to support
authentication while downloading kickstart from web server.

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Rebase from WRL8 to WRL9.

Compared with old installer, we do not support to pop a prompt page
while authentication failed, because the new installer do not support
snack module (The python snack is used for text display).

Upstream-Status: Inappropriate [wrlinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/flags.py     | 11 +++++++++++
 pyanaconda/kickstart.py | 41 ++++++++++++++++++++++++++++++++++-------
 2 files changed, 45 insertions(+), 7 deletions(-)

diff --git a/pyanaconda/flags.py b/pyanaconda/flags.py
index 1f94a5c..fe75f83 100644
--- a/pyanaconda/flags.py
+++ b/pyanaconda/flags.py
@@ -70,6 +70,11 @@ class Flags(object):
         self.ksprompt = True
         self.rescue_mode = False
         self.kexec = False
+
+        # Authentication for downloading kickstart file through http
+        self.ksuser = None
+        self.kspasswd = None
+
         # nosave options
         self.nosave_input_ks = False
         self.nosave_output_ks = False
@@ -86,6 +91,12 @@ class Flags(object):
                   "nombr", "gpt"):
             self.set_cmdline_bool(f)
 
+        if self.cmdline.has_key("ksuser"):
+            self.ksuser = self.cmdline['ksuser']
+
+        if self.cmdline.has_key("kspasswd"):
+            self.kspasswd = self.cmdline['kspasswd']
+
         if not os.path.exists("/selinux/load"):
             self.selinux = 0
 
diff --git a/pyanaconda/kickstart.py b/pyanaconda/kickstart.py
index f6b2fef..0a4f083 100644
--- a/pyanaconda/kickstart.py
+++ b/pyanaconda/kickstart.py
@@ -65,7 +65,7 @@ from pyanaconda.bootloader import GRUB2, get_bootloader
 
 from pykickstart.constants import CLEARPART_TYPE_NONE, FIRSTBOOT_SKIP, FIRSTBOOT_RECONFIG, KS_SCRIPT_POST, KS_SCRIPT_PRE, \
                                   KS_SCRIPT_TRACEBACK, KS_SCRIPT_PREINSTALL, SELINUX_DISABLED, SELINUX_ENFORCING, SELINUX_PERMISSIVE
-from pykickstart.errors import formatErrorMsg, KickstartError, KickstartValueError
+from pykickstart.errors import formatErrorMsg, KickstartError, KickstartValueError, KickstartAuthError
 from pykickstart.parser import KickstartParser
 from pykickstart.base import KickstartCommand, BaseData
 from pykickstart.options import KSOptionParser
@@ -1947,12 +1947,39 @@ class AnacondaKSHandler(superclass):
     def __str__(self):
         return superclass.__str__(self) + "\n" +  str(self.addons)
 
-class AnacondaPreParser(KickstartParser):
-    # A subclass of KickstartParser that only looks for %pre scripts and
-    # sets them up to be run.  All other scripts and commands are ignored.
+class WRKickstartParser(KickstartParser):
+    # A subclass of KickstartParser that parse the authentication failure
+    # while downloading kickstart file from web server
     def __init__ (self, handler, followIncludes=True, errorsAreFatal=True,
                   missingIncludeIsFatal=True):
         KickstartParser.__init__(self, handler, missingIncludeIsFatal=False)
+        self.username = flags.ksuser
+        self.password = flags.kspasswd
+
+    def readKickstart(self, f, reset=True):
+        while True:
+            try:
+                KickstartParser.readKickstart(self, f, reset=reset,
+                                              username=self.username,
+                                              password=self.password)
+
+                # Make sure the following readKickstart invoking will success
+                flags.ksuser = self.username
+                flags.kspasswd = self.password
+                break
+            except KickstartAuthError as e:
+                msg = 'Append "ksuser=<username> kspasswd=<password>" to boot command'
+                raise KickstartError(msg)
+            except:
+                raise
+
+
+class AnacondaPreParser(WRKickstartParser):
+    # A subclass of WRKickstartParser that only looks for %pre scripts and
+    # sets them up to be run.  All other scripts and commands are ignored.
+    def __init__ (self, handler, followIncludes=True, errorsAreFatal=True,
+                  missingIncludeIsFatal=True):
+        WRKickstartParser.__init__(self, handler, missingIncludeIsFatal=False)
 
     def handleCommand (self, lineno, args):
         pass
@@ -1966,17 +1993,17 @@ class AnacondaPreParser(KickstartParser):
         self.registerSection(NullSection(self.handler, sectionOpen="%addon"))
 
 
-class AnacondaKSParser(KickstartParser):
+class AnacondaKSParser(WRKickstartParser):
     def __init__ (self, handler, followIncludes=True, errorsAreFatal=True,
                   missingIncludeIsFatal=True, scriptClass=AnacondaKSScript):
         self.scriptClass = scriptClass
-        KickstartParser.__init__(self, handler)
+        WRKickstartParser.__init__(self, handler)
 
     def handleCommand (self, lineno, args):
         if not self.handler:
             return
 
-        return KickstartParser.handleCommand(self, lineno, args)
+        return WRKickstartParser.handleCommand(self, lineno, args)
 
     def setupSections(self):
         self.registerSection(PreScriptSection(self.handler, dataObj=self.scriptClass))
-- 
2.8.1

