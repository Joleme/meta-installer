From 0474e25522e00f3f6f0f8f164f959ebd180a1e6a Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 31 Mar 2017 13:59:01 +0800
Subject: [PATCH 52/62] support downloading file from http/ftp server to target
 image

Add key in kickstart to support downloading file from http/ftp server to target image,
'download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]'

Here is the example in kickstart file:
---start---
download --dest=/etc/rpm/keys/0x100001 --src=http://128.224.162.159/testkey
download --dest=file://etc/rpm/keys/0x100002 --src=http://128.224.162.159/testkey2
---end---

The file be download to target image (/mnt/image/****). For host image,
we could make use of "%pre" section with invoking shell to do that)

Upstream-Status: Inappropriate [wrlinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Rebase from WRL8 to WRL9

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Rebase from WRL9 to WRL10

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/install.py   |  1 +
 pyanaconda/kickstart.py | 97 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 98 insertions(+)

diff --git a/pyanaconda/install.py b/pyanaconda/install.py
index baf3f33..c0fc98e 100644
--- a/pyanaconda/install.py
+++ b/pyanaconda/install.py
@@ -94,6 +94,7 @@ def doConfiguration(storage, payload, ksdata, instClass):
         ksdata.firewall.execute(storage, ksdata, instClass)
         ksdata.xconfig.execute(storage, ksdata, instClass)
         ksdata.skipx.execute(storage, ksdata, instClass)
+        ksdata.download.execute(ksdata, instClass)
 
     if willWriteNetwork:
         with progress_report(_("Writing network configuration")):
diff --git a/pyanaconda/kickstart.py b/pyanaconda/kickstart.py
index c6d8470..93a50ba 100644
--- a/pyanaconda/kickstart.py
+++ b/pyanaconda/kickstart.py
@@ -71,6 +71,8 @@ from pykickstart.constants import CLEARPART_TYPE_NONE, FIRSTBOOT_SKIP, FIRSTBOOT
 from pykickstart.base import BaseHandler
 from pykickstart.errors import formatErrorMsg, KickstartError, KickstartValueError, KickstartAuthError
 from pykickstart.parser import KickstartParser
+from pykickstart.base import KickstartCommand, BaseData
+from pykickstart.options import KSOptionParser
 from pykickstart.parser import Script as KSScript
 from pykickstart.sections import NullSection, PackageSection, PostScriptSection, PreScriptSection, PreInstallScriptSection, \
                                  OnErrorScriptSection, TracebackScriptSection
@@ -1808,6 +1810,99 @@ class Upgrade(commands.upgrade.F20_Upgrade):
         iutil.ipmi_report(IPMI_ABORTED)
         sys.exit(1)
 
+class DownloadData(BaseData):
+    removedKeywords = BaseData.removedKeywords
+    removedAttrs = BaseData.removedAttrs
+
+    def __init__(self, *args, **kwargs):
+        BaseData.__init__(self, *args, **kwargs)
+        self.dest = kwargs.get("dest", None)
+        self.src = kwargs.get("src", None)
+
+    def __eq__(self, y):
+        return self.dest == y.dest
+
+    def _getArgsAsStr(self):
+        retval = "--dest=%s --src=%s" % (self.dest, self.src)
+        return retval
+
+    def __str__(self):
+        retval = BaseData.__str__(self)
+        retval += "download %s\n" % self._getArgsAsStr()
+        return retval
+
+class Download(KickstartCommand):
+    removedKeywords = KickstartCommand.removedKeywords
+    removedAttrs = KickstartCommand.removedAttrs
+
+    def __init__(self, writePriority=0, *args, **kwargs):
+        KickstartCommand.__init__(self, writePriority, *args, **kwargs)
+        self.op = self._getParser()
+        self.downloadList = kwargs.get("downloadList", [])
+
+    def __str__(self):
+        retval = "# Download file from http/ftp server to target image\n"
+        retval += "# download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]\n"
+        for d in self.downloadList:
+            retval += d.__str__()
+        retval += "\n"
+        return retval
+
+    def _getParser(self):
+        op = KSOptionParser()
+        op.add_option("--dest", dest="dest", required=True)
+        op.add_option("--src", dest="src", required=True)
+        return op
+
+    def parse(self, args):
+        (opts, extra) = self.op.parse_args(args=args, lineno=self.lineno)
+        dd = self.handler.DownloadData()
+        self._setToObj(self.op, opts, dd)
+        dd.lineno = self.lineno
+
+        # Check for duplicates in the data list.
+        if dd in self.dataList():
+            log.warn(_("A source %s has already been defined.") % dd.src)
+
+        log.info("kickstart downloading %s to %s" % (opts.src, opts.dest))
+        return dd
+
+    def dataList(self):
+        return self.downloadList
+
+    def execute(self, ksdata, instClass):
+        if not ksdata.download:
+            return
+
+        for dd in ksdata.download.downloadList:
+            if dd.dest.startswith("file:"):
+                dd.dest = dd.dest[len("file:"):]
+
+            if not dd.dest.startswith("/"):
+                msg = _("The dest %s is not on filesystem" % (dd.dest))
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+            dest = iutil.getSysroot() + dd.dest
+            log.info("downloading %s to %s" % (dd.src, dest))
+            dest_dir = os.path.dirname(dest)
+            if not os.path.exists(dest_dir):
+                os.makedirs(dest_dir)
+
+            try:
+                src_f = urlgrabber.urlopen(dd.src)
+            except urlgrabber.grabber.URLGrabError as e:
+                msg = _("The following error was encountered while downloading %s:\n\n%s" % (dd.src, e))
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+            with open(dest, "w+") as dest_f:
+                dest_f.write(src_f.read())
+                dest_f.close()
+
+            src_f.close()
+
+
 ###
 ### %anaconda Section
 ###
@@ -1907,6 +2002,7 @@ commandMap = {
         "volgroup": VolGroup,
         "xconfig": XConfig,
         "zfcp": ZFCP,
+        "download": Download,
 }
 
 dataMap = {
@@ -1916,6 +2012,7 @@ dataMap = {
         "RaidData": RaidData,
         "RepoData": RepoData,
         "VolGroupData": VolGroupData,
+        "DownloadData": DownloadData,
 }
 
 superclass = returnClassForVersion(RHEL7)
-- 
2.7.4

