From b8da56079aa5a1e36788cb6d52f7230ee64eeebd Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 31 Mar 2017 13:36:44 +0800
Subject: [PATCH 18/62] kickstart: disable Authconfig/AutoPart/Timezone

We do not support kickstart for now

Upstream-Status: Inappropriate [wrlinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/kickstart.py | 147 +++---------------------------------------------
 1 file changed, 7 insertions(+), 140 deletions(-)

diff --git a/pyanaconda/kickstart.py b/pyanaconda/kickstart.py
index 480380b..1deeccd 100644
--- a/pyanaconda/kickstart.py
+++ b/pyanaconda/kickstart.py
@@ -239,29 +239,10 @@ class Authconfig(commands.authconfig.FC3_Authconfig):
         self.packages = []
 
     def setup(self):
-        if self.seen:
-            self.packages = ["authconfig"]
+        pass
 
     def execute(self, *args):
-        cmd = "/usr/sbin/authconfig"
-        if not os.path.lexists(iutil.getSysroot()+cmd):
-            if self.seen:
-                msg = _("%s is missing. Cannot setup authentication.") % cmd
-                raise KickstartError(msg)
-            else:
-                return
-
-        args = ["--update", "--nostart"] + shlex.split(self.authconfig)
-
-        if not flags.automatedInstall and \
-           (os.path.exists(iutil.getSysroot() + "/lib64/security/pam_fprintd.so") or \
-            os.path.exists(iutil.getSysroot() + "/lib/security/pam_fprintd.so")):
-            args += ["--enablefingerprint"]
-
-        try:
-            iutil.execInSysroot(cmd, args)
-        except RuntimeError as msg:
-            log.error("Error running %s %s: %s", cmd, args, msg)
+        pass
 
 class AutoPart(commands.autopart.RHEL7_AutoPart):
     def parse(self, args):
@@ -693,41 +674,10 @@ class Firewall(commands.firewall.F20_Firewall):
         self.packages = []
 
     def setup(self):
-        if self.seen:
-            self.packages = ["firewalld"]
-
-    def execute(self, storage, ksdata, instClass):
-        args = []
-        # enabled is None if neither --enable or --disable is passed
-        # default to enabled if nothing has been set.
-        if self.enabled == False:
-            args += ["--disabled"]
-        else:
-            args += ["--enabled"]
-
-        if "ssh" not in self.services and "ssh" not in self.remove_services \
-            and "22:tcp" not in self.ports:
-            args += ["--service=ssh"]
-
-        for dev in self.trusts:
-            args += [ "--trust=%s" % (dev,) ]
-
-        for port in self.ports:
-            args += [ "--port=%s" % (port,) ]
-
-        for remove_service in self.remove_services:
-            args += [ "--remove-service=%s" % (remove_service,) ]
-
-        for service in self.services:
-            args += [ "--service=%s" % (service,) ]
+        pass
 
-        cmd = "/usr/bin/firewall-offline-cmd"
-        if not os.path.exists(iutil.getSysroot()+cmd):
-            if self.enabled:
-                msg = _("%s is missing. Cannot setup firewall.") % (cmd,)
-                raise KickstartError(msg)
-        else:
-            iutil.execInSysroot(cmd, args)
+    def execute(self, *args):
+        pass
 
 class Firstboot(commands.firstboot.FC3_Firstboot):
     def setup(self, *args):
@@ -1716,93 +1666,10 @@ class Timezone(commands.timezone.RHEL7_Timezone):
     def __init__(self, *args):
         commands.timezone.RHEL7_Timezone.__init__(self, *args)
 
-        self._added_chrony = False
-        self._enabled_chrony = False
-        self._disabled_chrony = False
-
     def setup(self, ksdata):
-        # do not install and use NTP package
-        if self.nontp or NTP_PACKAGE in ksdata.packages.excludedList:
-            if iutil.service_running(NTP_SERVICE) and \
-                    can_touch_runtime_system("stop NTP service"):
-                ret = iutil.stop_service(NTP_SERVICE)
-                if ret != 0:
-                    log.error("Failed to stop NTP service")
-
-            if self._added_chrony and NTP_PACKAGE in ksdata.packages.packageList:
-                ksdata.packages.packageList.remove(NTP_PACKAGE)
-                self._added_chrony = False
-
-            # Both un-enable and disable chrony, because sometimes it's installed
-            # off by default (packages) and sometimes not (liveimg).
-            if self._enabled_chrony and NTP_SERVICE in ksdata.services.enabled:
-                ksdata.services.enabled.remove(NTP_SERVICE)
-                self._enabled_chrony = False
-
-            if NTP_SERVICE not in ksdata.services.disabled:
-                ksdata.services.disabled.append(NTP_SERVICE)
-                self._disabled_chrony = True
-        # install and use NTP package
-        else:
-            if not iutil.service_running(NTP_SERVICE) and \
-                    can_touch_runtime_system("start NTP service"):
-                ret = iutil.start_service(NTP_SERVICE)
-                if ret != 0:
-                    log.error("Failed to start NTP service")
-
-            if not NTP_PACKAGE in ksdata.packages.packageList:
-                ksdata.packages.packageList.append(NTP_PACKAGE)
-                self._added_chrony = True
-
-            if self._disabled_chrony and NTP_SERVICE in ksdata.services.disabled:
-                ksdata.services.disabled.remove(NTP_SERVICE)
-                self._disabled_chrony = False
-
-            if not NTP_SERVICE in ksdata.services.enabled and \
-                    not NTP_SERVICE in ksdata.services.disabled:
-                ksdata.services.enabled.append(NTP_SERVICE)
-                self._enabled_chrony = True
-
+        pass
     def execute(self, *args):
-        # write out timezone configuration
-        if not timezone.is_valid_timezone(self.timezone):
-            # this should never happen, but for pity's sake
-            log.warning("Timezone %s set in kickstart is not valid, falling "\
-                        "back to default (America/New_York).", self.timezone)
-            self.timezone = "America/New_York"
-
-        timezone.write_timezone_config(self, iutil.getSysroot())
-
-        # write out NTP configuration (if set)
-        if not self.nontp and self.ntpservers:
-            chronyd_out_path = os.path.normpath(iutil.getSysroot() + ntp.CHRONY_CONFIG_FILE)
-            ntpd_out_path = os.path.normpath(iutil.getSysroot() + ntp.NTP_CONFIG_FILE)
-            if os.path.exists(chronyd_out_path):
-                log.debug("Modifying installed chrony configuration")
-                try:
-                    ntp.save_servers_to_config(self.ntpservers, conf_file_path=chronyd_out_path)
-                except ntp.NTPconfigError as ntperr:
-                    log.warning("Failed to save NTP configuration for chrony: %s", ntperr)
-            else:
-                log.debug("Creating chrony configuration based on the "
-                          "configuration from installation environment")
-                try:
-                    ntp.save_servers_to_config(self.ntpservers,
-                                               conf_file_path=ntp.CHRONY_CONFIG_FILE,
-                                               out_file_path=chronyd_out_path)
-                except ntp.NTPconfigError as ntperr:
-                    log.warning("Failed to save NTP configuration without chrony package: %s", ntperr)
-
-            if os.path.exists(ntpd_out_path):
-                log.debug("Modifying installed ntpd configuration")
-                try:
-                    ntp.save_servers_to_config(self.ntpservers, conf_file_path=ntpd_out_path)
-                except ntp.NTPconfigError as ntperr:
-                    log.warning("Failed to save NTP configuration for ntpd: %s", ntperr)
-            # This is special customer request when the ntp is installed so there is no point
-            # in creating conf file from NTP from installation environment.
-            else:
-                log.debug("ntpd configuration isn't created because the package wasn't installed")
+        pass
 
 class User(commands.user.F19_User):
     def execute(self, storage, ksdata, instClass, users):
-- 
2.7.4

