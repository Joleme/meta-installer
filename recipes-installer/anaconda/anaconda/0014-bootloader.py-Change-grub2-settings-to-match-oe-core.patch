From 7c4d4b2ad88548acf1b9a8120c0f7cbc29d67e7f Mon Sep 17 00:00:00 2001
From: Mark Hatle <mark.hatle@windriver.com>
Date: Thu, 28 Apr 2016 01:47:49 -0400
Subject: [PATCH 14/62] bootloader.py: Change 'grub2' settings to match oe-core

There is no 'grub2' package in oe-core, it's called 'grub'.  Adjust settings
to match this naming.  Also before writing out a variety of configuration
files, as necessary -- create the directories required.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/bootloader.py | 39 +++++++++++++++++++++++++++++++++------
 1 file changed, 33 insertions(+), 6 deletions(-)

diff --git a/pyanaconda/bootloader.py b/pyanaconda/bootloader.py
index de65a09..d3402fd 100644
--- a/pyanaconda/bootloader.py
+++ b/pyanaconda/bootloader.py
@@ -948,6 +948,10 @@ class BootLoader(object):
             raise BootLoaderError("no config file defined for this boot loader")
 
         config_path = os.path.normpath(iutil.getSysroot() + self.config_file)
+        config_dir = os.path.dirname(config_path)
+        if not os.path.isdir(config_dir):
+            os.mkdir(config_dir, 0755)
+
         if os.access(config_path, os.R_OK):
             os.rename(config_path, config_path + ".anacbak")
 
@@ -1217,6 +1221,11 @@ class GRUB(BootLoader):
     def write_device_map(self):
         """ Write out a device map containing all supported devices. """
         map_path = os.path.normpath(iutil.getSysroot() + self.device_map_file)
+
+        map_dir = os.path.dirname(map_path)
+        if not os.path.isdir(map_dir):
+            os.mkdir(map_dir, 0755)
+
         if os.access(map_path, os.R_OK):
             os.rename(map_path, map_path + ".anacbak")
 
@@ -1388,9 +1397,9 @@ class GRUB2(GRUB):
 
     """
     name = "GRUB2"
-    packages = ["grub2"]
+    packages = ["grub"]
     _config_file = "grub.cfg"
-    _config_dir = "grub2"
+    _config_dir = "grub"
     _passwd_file = "user.cfg"
     defaults_file = "/etc/default/grub"
     terminal_type = "console"
@@ -1453,6 +1462,11 @@ class GRUB2(GRUB):
     def write_device_map(self):
         """ Write out a device map containing all supported devices. """
         map_path = os.path.normpath(iutil.getSysroot() + self.device_map_file)
+
+        map_dir = os.path.dirname(map_path)
+        if not os.path.isdir(map_dir):
+            os.mkdir(map_dir, 0755)
+
         if os.access(map_path, os.R_OK):
             os.rename(map_path, map_path + ".anacbak")
 
@@ -1478,6 +1492,11 @@ class GRUB2(GRUB):
 
     def write_defaults(self):
         defaults_file = "%s%s" % (iutil.getSysroot(), self.defaults_file)
+
+        defaults_dir = os.path.dirname(defaults_file)
+        if not os.path.isdir(defaults_dir):
+            os.mkdir(defaults_dir, 0755)
+
         defaults = open(defaults_file, "w+")
         defaults.write("GRUB_TIMEOUT=%d\n" % self.timeout)
         defaults.write("GRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\"\n")
@@ -1509,7 +1528,7 @@ class GRUB2(GRUB):
         (pread, pwrite) = os.pipe()
         iutil.eintr_retry_call(os.write, pwrite, "%s\n%s\n" % (self.password, self.password))
         iutil.eintr_retry_call(os.close, pwrite)
-        buf = iutil.execWithCapture("grub2-mkpasswd-pbkdf2", [],
+        buf = iutil.execWithCapture("grub-mkpasswd-pbkdf2", [],
                                     stdin=pread,
                                     root=iutil.getSysroot())
         iutil.eintr_retry_call(os.close, pread)
@@ -1522,6 +1541,11 @@ class GRUB2(GRUB):
             return
 
         users_file = "%s%s/%s" % (iutil.getSysroot(), self.config_dir, self._passwd_file)
+
+        users_dir = os.path.dirname(users_file)
+        if not os.path.isdir(users_dir):
+            os.mkdir(users_dir, 0755)
+
         header = open(users_file, "w")
         # XXX FIXME: document somewhere that the username is "root"
         self._encrypt_password()
@@ -1554,12 +1578,12 @@ class GRUB2(GRUB):
                 log.warn("Failed to find default image (%s), defaulting to 0", self.default.label)
                 default_index = 0
 
-            rc = iutil.execInSysroot("grub2-set-default", [str(default_index)])
+            rc = iutil.execInSysroot("grub-set-default", [str(default_index)])
             if rc:
                 log.error("failed to set default menu entry to %s", productName)
 
         # now tell grub2 to generate the main configuration file
-        rc = iutil.execInSysroot("grub2-mkconfig",
+        rc = iutil.execInSysroot("grub-mkconfig",
                                  ["-o", self.config_file])
         if rc:
             raise BootLoaderError("failed to write boot loader configuration")
@@ -1586,7 +1610,7 @@ class GRUB2(GRUB):
                 else:
                     log.info("bootloader.py: mbr will be updated for grub2")
 
-            rc = iutil.execWithRedirect("grub2-install", grub_args,
+            rc = iutil.execWithRedirect("grub-install", grub_args,
                                         root=iutil.getSysroot(),
                                         env_prune=['MALLOC_PERTURB_'])
             if rc:
@@ -2331,6 +2355,9 @@ def writeSysconfigKernel(storage, version, instClass):
 
     kernel = h.name
 
+    if not os.path.isdir(iutil.getSysroot() + "/etc/sysconfig"):
+        os.mkdir(iutil.getSysroot() + "/etc/sysconfig", 0755)
+
     f = open(iutil.getSysroot() + "/etc/sysconfig/kernel", "w+")
     f.write("# UPDATEDEFAULT specifies if new-kernel-pkg should make\n"
             "# new kernels the default\n")
-- 
2.7.4

