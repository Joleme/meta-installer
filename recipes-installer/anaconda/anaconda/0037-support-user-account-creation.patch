From 17e5bccfc5d338e270716ccc0edf6415e8adbae9 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 31 Mar 2017 13:42:00 +0800
Subject: [PATCH 37/62] support user account creation

- While user is admin, add it to group sudo rather than wheel.

- Do not support mail spool dir creation.

- Do not support user accout advanced setting

Upstream-Status: Inappropriate [wrlinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/ui/gui/spokes/user.py |  9 ++++-----
 pyanaconda/users.py              | 17 ++++++++++++++++-
 2 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/pyanaconda/ui/gui/spokes/user.py b/pyanaconda/ui/gui/spokes/user.py
index eab1071..9437a5b 100644
--- a/pyanaconda/ui/gui/spokes/user.py
+++ b/pyanaconda/ui/gui/spokes/user.py
@@ -243,8 +243,8 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokePasswordCheckHandler):
             self._user = self.data.user.userList[0]
         else:
             self._user = self.data.UserData()
-        self._wheel = self.data.GroupData(name = "wheel")
-        self._groupDict = {"wheel": self._wheel}
+        self._wheel = self.data.GroupData(name = "sudo")
+        self._groupDict = {"sudo": self._wheel}
 
         # placeholders for the text boxes
         self.fullname = self.builder.get_object("t_fullname")
@@ -254,6 +254,7 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokePasswordCheckHandler):
         self.admin = self.builder.get_object("c_admin")
         self.usepassword = self.builder.get_object("c_usepassword")
         self.b_advanced = self.builder.get_object("b_advanced")
+        self.b_advanced.set_sensitive(False)
 
         # set initial state of the input field
         self.input_enabled = self.usepassword.get_active()
@@ -369,7 +370,7 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokePasswordCheckHandler):
         else:
             self.fullname.grab_focus()
 
-        self.b_advanced.set_sensitive(bool(self._user.name))
+        self.b_advanced.set_sensitive(False)
 
     @property
     def status(self):
@@ -491,10 +492,8 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokePasswordCheckHandler):
 
         if editable.get_text() == "":
             self.guesser[editable] = True
-            self.b_advanced.set_sensitive(False)
         else:
             self.guesser[editable] = False
-            self.b_advanced.set_sensitive(True)
 
             # Re-run the password checks against the new username
             self.pw.emit("changed")
diff --git a/pyanaconda/users.py b/pyanaconda/users.py
index 2e97ed8..176fe41 100644
--- a/pyanaconda/users.py
+++ b/pyanaconda/users.py
@@ -551,6 +551,7 @@ class Users:
            gid       -- The GID for the new user.  If none is given, the next
                         available one is used.
         """
+        log.info("kwargs %s" % kwargs)
         childpid = self._prepareChroot(kwargs.get("root", iutil.getSysroot()))
         if childpid == 0:
             if self.admin.lookupUserByName(user_name):
@@ -591,7 +592,7 @@ class Users:
             mk_homedir = not os.path.exists(userEnt.get(libuser.HOMEDIRECTORY)[0])
 
             try:
-                self.admin.addUser(userEnt, mkmailspool=kwargs.get("mkmailspool", True),
+                self.admin.addUser(userEnt, mkmailspool=kwargs.get("mkmailspool", False),
                                    mkhomedir=mk_homedir)
             except RuntimeError as e:
                 log.critical("Error when creating new user: %s", e)
@@ -721,3 +722,17 @@ class Users:
             os._exit(0)
         else:
             return self._finishChroot(childpid)
+
+# For testing
+if __name__ == "__main__":
+    import logging
+    from pyanaconda import anaconda_log
+    anaconda_log.init()
+    anaconda_log.logger.setupVirtio()
+
+    log = logging.getLogger("anaconda")
+
+    createLuserConf("/mnt/sysimage")
+    users = Users()
+    users.createUser("test", password="123456", shell="/bin/bash", groups=["wheel"])
+  
-- 
2.7.4

