From 1b7f7c120b83ad20d9943db9ded26c96e98bf11d Mon Sep 17 00:00:00 2001
From: "Hongxu Jia" <hongxu.jia@windriver.com>
Date: Sat, 28 Nov 2015 14:12:45 +0800
Subject: [PATCH] fix rpmKernelVersionList failed since oe-core updated

The oe-core (70e5926828da25d625282c0426d98409364be1b9)
added a new feature to support build multi types kernel
at one time, in which the package kernel-image is empty,
and it rdepends multi types kernel images packages.

Whether kernel-image is empty or not, the anaconda should
work. So we get version from kernel-image, and then
from its requires(rdepends) packages.

Upstream-Status: Inappropriate [wrlinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/packages.py | 62 +++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 49 insertions(+), 13 deletions(-)

diff --git a/pyanaconda/packages.py b/pyanaconda/packages.py
index c60f661..037745a 100644
--- a/pyanaconda/packages.py
+++ b/pyanaconda/packages.py
@@ -267,24 +267,60 @@ def rpmKernelVersionList(rootPath = "/"):
             return header['name'][7:]
         return ""
 
-    versions = []
+    def get_headers(ts, pkgname):
+        headers = []
+        mi = ts.dbMatch('provides', pkgname)
+        for h in mi:
+            headers.append(h)
+
+        log.info("get_headers %s %s" % (pkgname, headers))
+        return headers
+
+    def get_requires(ts, pkgname):
+        pkg_requires = []
+        for h in get_headers(ts, pkgname):
+            for r in h['requires']:
+                if r not in pkg_requires:
+                    pkg_requires.append(r)
+
+        log.info("pkg: %s, requires %s" % (pkgname, pkg_requires))
+        return pkg_requires
+
+    def get_pkgversions(ts, pkgname):
+        pkg_versions = []
+        for h in get_headers(ts, pkgname):
+            v = get_version(h)
+            tag = get_tag(h)
+            if v == "" or tag == "":
+                log.info("Unable to determine kernel type/version for %s-%s-%s.%s"
+                             % (h['name'],
+                                h['version'],
+                                h['release'],
+                                h['arch']))
+                continue
+            # rpm really shouldn't return the same kernel more than once... but
+            # sometimes it does (#467822)
+            if (v, h['arch'], tag) in pkg_versions:
+                continue
+            pkg_versions.append( (v, h['arch'], tag) )
+
+        log.info("get_pkgversions %s, %s" % (pkgname, pkg_versions))
+        return pkg_versions
 
     iutil.resetRpmDb(rootPath)
     ts = rpm.TransactionSet(rootPath)
 
-    mi = ts.dbMatch('provides', 'kernel-image')
-    for h in mi:
-        v = get_version(h)
-        tag = get_tag(h)
-        if v == "" or tag == "":
-            log.warning("Unable to determine kernel type/version for %s-%s-%s.%s" %(h['name'], h['version'], h['release'], h['arch'])) 
-            continue
-        # rpm really shouldn't return the same kernel more than once... but
-        # sometimes it does (#467822)
-        if (v, h['arch'], tag) in versions:
-            continue
-        versions.append( (v, h['arch'], tag) )
+    pkgversions = get_pkgversions(ts, 'kernel-image')
+    if pkgversions == []:
+        for require in get_requires(ts, 'kernel-image'):
+            pkgversions += get_pkgversions(ts, require)
+
+    versions = []
+    for (ver, arch, tag) in pkgversions:
+        if (ver, arch, tag) not in versions:
+            versions.append((ver, arch, tag))
 
+    log.info("versions %s" % versions)
     return versions
 
 def rpmSetupGraphicalSystem(anaconda):
-- 
1.9.1

