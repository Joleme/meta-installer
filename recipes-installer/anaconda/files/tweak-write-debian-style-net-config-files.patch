network.py: tweak write-debian-style-net-config-files-to-target.patch

This fix based on the write-debian-style-net-config-files-to-target.patch:

- The '/etc/udev/rules.d/70-persistent-net.rules' no longer existed,
  so the copy operation was invalid;

- The '/etc/network/interfaces' has already existed on the installing
  host which provided by init-ifupdown, the override was meaningless;

- The '/etc/network/interfaces' has already existed on the installed
  target, the override caused the network of installed target was
  unreachable;

- Clean up the trash code;

Upstream-Status: Inappropriate [WR specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/network.py | 55 ---------------------------------------------------
 1 file changed, 55 deletions(-)

diff --git a/pyanaconda/network.py b/pyanaconda/network.py
--- a/pyanaconda/network.py
+++ b/pyanaconda/network.py
@@ -723,57 +723,8 @@ class Network:
         self._copyFileToPath("/etc/resolv.conf", instPath,
                              overwrite=True)
 
-        # /etc/udev/rules.d/70-persistent-net.rules
-        self._copyFileToPath("/etc/udev/rules.d/70-persistent-net.rules",
-                             instPath, overwrite=True)
-
-        # /etc/network/interfaces
-        # After copying the file to the target we reconstruct
-        # a basic interfaces file on the host. When reusing a vmdk
-        # image the presence of a valid interfaces file would makes
-        # NM ignore the interfaces listed there. This is transparent
-        # to the live USB image.
-        self._copyFileToPath("/etc/network/interfaces", instPath,
-                             overwrite=True)
-        f = open("/etc/network/interfaces", "w")
-        f.write("auto lo\niface lo inet loopback\n\n")
-        f.close()
-
     def copyConfigToPath(self, instPath=''):
         self.copyConfigToPath_debian(instPath)
-        return
-
-        if flags.imageInstall and instPath:
-            # for image installs we only want to write out
-            # /etc/sysconfig/network
-            destfile = os.path.normpath(instPath + networkConfFile)
-            if not os.path.isdir(os.path.dirname(destfile)):
-                iutil.mkdirChain(os.path.dirname(destfile))
-            shutil.move("/tmp/sysconfig-network", destfile)
-            return
-
-        # /etc/sysconfig/network-scripts/ifcfg-*
-        # /etc/sysconfig/network-scripts/keys-*
-        # we can copy all of them
-        self._copyIfcfgFiles(instPath)
-
-        # /etc/dhcp/dhclient-DEVICE.conf
-        # TODORV: do we really don't want overwrite on live cd?
-        for devName, device in self.netdevices.items():
-            dhclientfile = os.path.join("/etc/dhcp/dhclient-%s.conf" % devName)
-            self._copyFileToPath(dhclientfile, instPath)
-
-        # /etc/sysconfig/network
-        self._copyFileToPath(networkConfFile, instPath,
-                             overwrite=flags.livecdInstall)
-
-        # /etc/resolv.conf
-        self._copyFileToPath("/etc/resolv.conf", instPath,
-                             overwrite=flags.livecdInstall)
-
-        # /etc/udev/rules.d/70-persistent-net.rules
-        self._copyFileToPath("/etc/udev/rules.d/70-persistent-net.rules",
-                             instPath, overwrite=flags.livecdInstall)
 
     def disableNMForStorageDevices(self, anaconda, instPath=''):
         for devName, device in self.netdevices.items():
@@ -802,12 +753,6 @@ class Network:
             f.write("localhost.localdomain\n")
         f.close()
 
-        # /etc/network/interfaces
-        if not os.path.isdir("/etc/network"):
-            iutil.mkdirChain("/etc/network")
-        f = open("/etc/network/interfaces", "w")
-        f.write("auto lo\niface lo inet loopback\n\n")
-
         #con = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "con", "status"])
         #connames = [line for line in con.split('\n') if line.startswith('DEVICES')]
         #names = [line.split(':')[1].strip() for line in connames]
-- 
1.8.1.2

