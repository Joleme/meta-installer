Index: b/pyanaconda/flags.py
===================================================================
--- a/pyanaconda/flags.py
+++ b/pyanaconda/flags.py
@@ -18,7 +18,6 @@
 #
 
 import os
-import selinux
 import shlex
 from constants import *
 
@@ -117,8 +116,7 @@ class Flags:
         if self.__dict__['flags']['cmdline'].has_key("rpmarch"):
             self.__dict__['flags']['targetarch'] = self.__dict__['flags']['cmdline']['rpmarch']
 
-        if not selinux.is_selinux_enabled():
-            self.__dict__['flags']['selinux'] = 0
+        self.__dict__['flags']['selinux'] = 0
 
         self.__dict__['flags']['nogpt'] = self.__dict__['flags']['cmdline'].has_key("nogpt")
 
Index: b/pyanaconda/isys/__init__.py
===================================================================
--- a/pyanaconda/isys/__init__.py
+++ b/pyanaconda/isys/__init__.py
@@ -42,7 +42,6 @@ import resource
 import re
 import struct
 import dbus
-import selinux
 
 import logging
 log = logging.getLogger("anaconda")
@@ -430,16 +429,6 @@ def getIPAddresses(dev, version=4):
 
     return addresses
 
-## Get the correct context for a file from loaded policy.
-# @param fn The filename to query.
-def matchPathContext(fn):
-    con = None
-    try:
-        con = selinux.matchpathcon(os.path.normpath(fn), 0)[1]
-    except OSError as e:
-        log.info("failed to get default SELinux context for %s: %s" % (fn, e))
-    return con
-
 ## Set the SELinux file context of a file
 # @param fn The filename to fix.
 # @param con The context to use.
@@ -447,21 +436,12 @@ def matchPathContext(fn):
 def setFileContext(fn, con, instroot = '/'):
     full_path = os.path.normpath("%s/%s" % (instroot, fn))
     rc = False
-    if con is not None and os.access(full_path, os.F_OK):
-        try:
-            rc = (selinux.lsetfilecon(full_path, con) == 0)
-        except OSError as e:
-            log.info("failed to set SELinux context for %s: %s" % (full_path, e))
     return rc
 
 ## Restore the SELinux file context of a file to its default.
 # @param fn The filename to fix.
 # @param instroot An optional root filesystem to look under for fn.
 def resetFileContext(fn, instroot = '/'):
-    con = matchPathContext(fn)
-    if con:
-        if setFileContext(fn, con, instroot):
-            return con
     return None
 
 def prefix2netmask(prefix):
Index: b/pyanaconda/livecd.py
===================================================================
--- a/pyanaconda/livecd.py
+++ b/pyanaconda/livecd.py
@@ -31,8 +31,6 @@ import time
 import subprocess
 import storage
 
-import selinux
-
 from flags import flags
 from constants import *
 
@@ -58,12 +56,6 @@ def copytree(src, dst, symlinks=False, p
         except OverflowError:
             log.error("Could not set owner and group on file %s" % dest)
 
-    def trySetfilecon(src, dest):
-        try:
-            selinux.lsetfilecon(dest, selinux.lgetfilecon(src)[1])
-        except OSError:
-            log.error("Could not set selinux context on file %s" % dest)
-
     # copy of shutil.copytree which doesn't require dst to not exist
     # and which also has options to preserve the owner and selinux contexts
     names = os.listdir(src)
@@ -77,8 +69,6 @@ def copytree(src, dst, symlinks=False, p
             if symlinks and os.path.islink(srcname):
                 linkto = os.readlink(srcname)
                 os.symlink(linkto, dstname)
-                if preserveSelinux:
-                    trySetfilecon(srcname, dstname)
             elif os.path.isdir(srcname):
                 copytree(srcname, dstname, symlinks, preserveOwner, preserveSelinux)
             else:
@@ -86,9 +76,6 @@ def copytree(src, dst, symlinks=False, p
                 if preserveOwner:
                     tryChown(srcname, dstname)
 
-                if preserveSelinux:
-                    trySetfilecon(srcname, dstname)
-
                 shutil.copystat(srcname, dstname)
         except (IOError, OSError) as why:
             errors.append((srcname, dstname, str(why)))
@@ -99,8 +86,6 @@ def copytree(src, dst, symlinks=False, p
     try:
         if preserveOwner:
             tryChown(src, dst)
-        if preserveSelinux:
-            trySetfilecon(src, dst)
 
         shutil.copystat(src, dst)
     except OSError as e:
Index: b/pyanaconda/upgrade.py
===================================================================
--- a/pyanaconda/upgrade.py
+++ b/pyanaconda/upgrade.py
@@ -28,7 +28,6 @@ import sys
 import os.path
 import shutil
 import string
-import selinux
 from flags import flags
 from constants import *
 from product import productName
@@ -245,17 +244,6 @@ def upgradeMountFilesystems(anaconda):
         shutil.move(anaconda.rootPath + "/etc/rpm/platform",
                     anaconda.rootPath + "/etc/rpm/platform.rpmsave")
 
-    # if they've been booting with selinux disabled, then we should
-    # disable it during the install as well (#242510)
-    try:
-        if os.path.exists(anaconda.rootPath + "/.autorelabel"):
-            ctx = selinux.getfilecon(anaconda.rootPath + "/.autorelabel")[1]
-            if not ctx or ctx == "unlabeled":
-                flags.selinux = False
-                log.info("Disabled SELinux for upgrade based on /.autorelabel")
-    except Exception as e:
-        log.warning("error checking selinux state: %s" %(e,))
-
 def setSteps(anaconda):
     dispatch = anaconda.dispatch
     dispatch.reset_scheduling() # scrap what is scheduled
Index: b/pyanaconda/storage/formats/fs.py
===================================================================
--- a/pyanaconda/storage/formats/fs.py
+++ b/pyanaconda/storage/formats/fs.py
@@ -30,7 +30,6 @@ import math
 import os
 import sys
 import tempfile
-import selinux
 from pyanaconda import isys
 
 from ..errors import *
@@ -46,10 +45,7 @@ log = logging.getLogger("storage")
 import gettext
 _ = lambda x: gettext.ldgettext("anaconda", x)
 
-try:
-    lost_and_found_context = selinux.matchpathcon("/lost+found", 0)[1]
-except OSError:
-    lost_and_found_context = None
+lost_and_found_context = None
 
 fs_configs = {}
 
