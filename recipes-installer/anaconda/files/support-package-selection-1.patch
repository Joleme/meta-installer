From 6b2d8c9d0ffb5b170fad937cd7bf4d5daec4ae2f Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Tue, 28 Apr 2015 18:16:43 +0800
Subject: [PATCH] add PackageSelector.glade/PackageSelector.py/smartquery.py to
 support package-selection

Refer upstream's group-selection (GroupSelector.glade/GroupSelector.py),
and based on WRLinux's rpm smart, we support package-selection.

The PackageSelector.glade/PackageSelector.py is front-end GUI page;

Upstream-Status: Inappropriate [WRLinux specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 data/ui/PackageSelector.glade    | 224 ++++++++++++++++++++
 pyanaconda/iw/PackageSelector.py | 439 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 663 insertions(+)
 create mode 100644 data/ui/PackageSelector.glade
 create mode 100644 pyanaconda/iw/PackageSelector.py

diff --git a/data/ui/PackageSelector.glade b/data/ui/PackageSelector.glade
new file mode 100644
index 0000000..cbe1131
--- /dev/null
+++ b/data/ui/PackageSelector.glade
@@ -0,0 +1,224 @@
+<?xml version="1.0" standalone="no"?>
+<!--*- mode: xml -*-->
+<!DOCTYPE glade-interface SYSTEM "http://glade.gnome.org/glade-2.0.dtd">
+<glade-interface>
+  <widget class="GtkWindow" id="packageSelectionWindow">
+    <property name="visible">True</property>
+    <property name="title" translatable="yes">window1</property>
+    <property name="type">GTK_WINDOW_TOPLEVEL</property>
+    <property name="window_position">GTK_WIN_POS_NONE</property>
+    <property name="modal">False</property>
+    <property name="resizable">True</property>
+    <property name="destroy_with_parent">False</property>
+    <property name="decorated">True</property>
+    <property name="skip_taskbar_hint">False</property>
+    <property name="skip_pager_hint">False</property>
+    <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
+    <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
+    <property name="focus_on_map">True</property>
+    <property name="urgency_hint">False</property>
+    <signal name="destroy_event" handler="on_packageSelectionWindow_destroy_event" last_modification_time="Fri, 02 Dec 2005 21:41:59 GMT"/>
+    <signal name="delete_event" handler="on_packageSelectionWindow_delete_event" last_modification_time="Fri, 02 Dec 2005 21:42:23 GMT"/>
+    <child>
+      <widget class="GtkVBox" id="packageSelectionBox">
+        <property name="border_width">12</property>
+        <property name="width_request">700</property>
+        <property name="visible">True</property>
+        <property name="homogeneous">False</property>
+        <property name="spacing">6</property>
+        <child>
+          <widget class="GtkHBox" id="catModeHBox">
+            <property name="border_width">0</property>
+            <property name="visible">True</property>
+            <property name="homogeneous">False</property>
+            <property name="spacing">12</property>
+          </widget>
+          <packing>
+            <property name="padding">0</property>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="GtkLabel" id="mainLabel">
+            <property name="width_request">600</property>
+            <property name="visible">True</property>
+            <property name="label" translatable="yes">You can optional select a different set of packages to install</property>
+            <property name="use_underline">False</property>
+            <property name="use_markup">False</property>
+            <property name="justify">GTK_JUSTIFY_LEFT</property>
+            <property name="wrap">True</property>
+            <property name="selectable">False</property>
+            <property name="xalign">0</property>
+            <property name="yalign">0</property>
+            <property name="xpad">0</property>
+            <property name="ypad">0</property>
+            <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+            <property name="width_chars">-1</property>
+            <property name="single_line_mode">False</property>
+            <property name="angle">0</property>
+          </widget>
+          <packing>
+            <property name="padding">0</property>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="GtkHBox" id="hbox2">
+            <property name="border_width">1</property>
+            <property name="visible">True</property>
+            <property name="homogeneous">True</property>
+            <property name="spacing">12</property>
+            <child>
+              <widget class="GtkScrolledWindow" id="categorySW">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="shadow_type">GTK_SHADOW_IN</property>
+                <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+                <child>
+                  <widget class="GtkTreeView" id="categoryList">
+                    <property name="width_request">275</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="headers_visible">False</property>
+                    <property name="rules_hint">False</property>
+                    <property name="reorderable">False</property>
+                    <property name="enable_search">True</property>
+                    <property name="fixed_height_mode">False</property>
+                    <property name="hover_selection">False</property>
+                    <property name="hover_expand">False</property>
+                  </widget>
+                </child>
+              </widget>
+              <packing>
+                <property name="padding">0</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+              </packing>
+            </child>
+            <child>
+              <widget class="GtkScrolledWindow" id="packageSW">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="shadow_type">GTK_SHADOW_IN</property>
+                <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+                <child>
+                  <widget class="GtkTreeView" id="packageList">
+                    <property name="width_request">325</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="headers_visible">False</property>
+                    <property name="rules_hint">False</property>
+                    <property name="reorderable">False</property>
+                    <property name="enable_search">True</property>
+                    <property name="fixed_height_mode">False</property>
+                    <property name="hover_selection">False</property>
+                    <property name="hover_expand">False</property>
+                  </widget>
+                </child>
+              </widget>
+              <packing>
+                <property name="padding">0</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+              </packing>
+            </child>
+          </widget>
+          <packing>
+            <property name="padding">0</property>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="GtkHBox" id="hbox3">
+            <property name="border_width">1</property>
+            <property name="visible">True</property>
+            <property name="homogeneous">True</property>
+            <property name="spacing">12</property>
+            <child>
+              <widget class="GtkScrolledWindow" id="categorySWindow">
+                <property name="height_request">1</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="shadow_type">GTK_SHADOW_IN</property>
+                <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+                <child>
+                  <widget class="GtkTextView" id="categoryTextView">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="editable">False</property>
+                    <property name="overwrite">False</property>
+                    <property name="accepts_tab">True</property>
+                    <property name="justification">GTK_JUSTIFY_LEFT</property>
+                    <property name="wrap_mode">GTK_WRAP_WORD</property>
+                    <property name="cursor_visible">False</property>
+                    <property name="pixels_above_lines">0</property>
+                    <property name="pixels_below_lines">0</property>
+                    <property name="pixels_inside_wrap">0</property>
+                    <property name="left_margin">0</property>
+                    <property name="right_margin">0</property>
+                    <property name="indent">0</property>
+                    <property name="text" translatable="yes"/>
+                  </widget>
+                </child>
+              </widget>
+              <packing>
+                <property name="padding">0</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+              </packing>
+            </child>
+            <child>
+              <widget class="GtkScrolledWindow" id="packageSWindow">
+                <property name="height_request">1</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+                <property name="shadow_type">GTK_SHADOW_IN</property>
+                <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+                <child>
+                  <widget class="GtkTextView" id="packageTextView">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="editable">False</property>
+                    <property name="overwrite">False</property>
+                    <property name="accepts_tab">True</property>
+                    <property name="justification">GTK_JUSTIFY_LEFT</property>
+                    <property name="wrap_mode">GTK_WRAP_WORD</property>
+                    <property name="cursor_visible">False</property>
+                    <property name="pixels_above_lines">0</property>
+                    <property name="pixels_below_lines">0</property>
+                    <property name="pixels_inside_wrap">0</property>
+                    <property name="left_margin">0</property>
+                    <property name="right_margin">0</property>
+                    <property name="indent">0</property>
+                    <property name="text" translatable="yes"/>
+                  </widget>
+                </child>
+              </widget>
+              <packing>
+                <property name="padding">0</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+              </packing>
+            </child>
+          </widget>
+          <packing>
+            <property name="padding">0</property>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+          </packing>
+        </child>
+      </widget>
+    </child>
+  </widget>
+</glade-interface>
diff --git a/pyanaconda/iw/PackageSelector.py b/pyanaconda/iw/PackageSelector.py
new file mode 100644
index 0000000..38be5f8
--- /dev/null
+++ b/pyanaconda/iw/PackageSelector.py
@@ -0,0 +1,439 @@
+#
+# PackageSelector.py
+#
+# Copyright (C) 2015  Wind River Systems
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+import os, sys
+import logging
+import gettext
+
+import gtk
+import gtk.glade
+import gtk.gdk as gdk
+import gobject
+
+I18N_DOMAIN="anaconda"
+
+import rpm
+import logging
+log = logging.getLogger("anaconda")
+
+GLADE_FILE = "PackageSelector.glade"
+
+def _getgladefile(fn):
+    log.info("_getgladefile")
+
+    if os.path.exists(fn):
+        return fn
+    elif os.path.exists("data/%s" %(fn,)):
+        return "data/%s" %(fn,)
+    else:
+        return "/usr/share/pirut/ui/%s" %(fn,)
+
+t = gettext.translation(I18N_DOMAIN, "/usr/share/locale", fallback = True)
+_ = t.lgettext
+
+# the PackageSelector requires a Smart object which also implements the
+# following additional methods:
+class PackageSelector:
+    def __init__(self, smartobj, getgladefunc = None, framefunc = None):
+        self.asmart = smartobj
+
+        # It parses 'smart query --show-all'
+        self.packages = self.asmart.PackagesObj()
+
+        # Mark the arch checkbox selected or not
+        self.select_arch = dict()
+        for arch in self.packages.get_archs():
+            self.select_arch[arch] = False
+
+        self.getgladefunc = getgladefunc
+        self.framefunc = framefunc
+        if getgladefunc:
+            xmlfn = getgladefunc(GLADE_FILE)
+        else:
+            xmlfn = _getgladefile(GLADE_FILE)
+
+        self.xml = gtk.glade.XML(xmlfn, "packageSelectionBox",
+                                 domain=I18N_DOMAIN)
+        self.vbox = self.xml.get_widget("packageSelectionBox")
+
+        self._setupCatModeRadioButton()
+        self._createStores()
+        self.vbox.show()
+
+    def _setupCatModeRadioButton(self):
+        hbox = self.xml.get_widget("catModeHBox")
+
+        button = gtk.RadioButton(None, "_Category by packagegroup")
+        button.connect("toggled", self._catRadioToggled, "packagegroupRadio")
+        hbox.pack_start(button, expand=False, fill=False)
+        button.show()
+
+        self.catModeArch = gtk.RadioButton(button, "Category by _arch")
+        self.catModeArch.connect("toggled", self._catRadioToggled, "archRadio")
+        hbox.pack_start(self.catModeArch, expand=False, fill=False)
+        self.catModeArch.show()
+
+    def _createStores(self):
+        self._createCategoryStore()
+        self._createPackageStore()
+
+    def _createCategoryStore(self):
+        # checkbox, display string, object
+        self.catstore = gtk.TreeStore(gobject.TYPE_BOOLEAN,
+                                      gobject.TYPE_STRING,
+                                      gobject.TYPE_PYOBJECT)
+        tree = self.xml.get_widget("categoryList")
+        tree.set_model(self.catstore)
+
+        column = gtk.TreeViewColumn(None, None)
+        column.set_clickable(True)
+        cbr = gtk.CellRendererToggle()
+        column.pack_start(cbr, False)
+        column.add_attribute(cbr, 'active', 0)
+        cbr.connect ("toggled", self._catToggled)
+        tree.append_column(column)
+
+        renderer = gtk.CellRendererText()
+        column = gtk.TreeViewColumn('Text', renderer, markup=1)
+        column.set_clickable(False)
+        tree.append_column(column)
+        tree.columns_autosize()
+        tree.set_enable_search(False)
+        tree.grab_focus()
+
+        selection = tree.get_selection()
+        selection.connect("changed", self._categorySelected)
+        selection.set_mode(gtk.SELECTION_MULTIPLE)
+
+    def _createPackageStore(self):
+        # checkbox, display string, object
+        self.packagestore = gtk.TreeStore(gobject.TYPE_BOOLEAN,
+                                          gobject.TYPE_STRING,
+                                          gobject.TYPE_PYOBJECT)
+        tree = self.xml.get_widget("packageList")
+        tree.set_model(self.packagestore)
+
+        column = gtk.TreeViewColumn(None, None)
+        column.set_clickable(True)
+        cbr = gtk.CellRendererToggle()
+        column.pack_start(cbr, False)
+        column.add_attribute(cbr, 'active', 0)
+        cbr.connect ("toggled", self._packageToggled)
+        tree.append_column(column)
+
+        renderer = gtk.CellRendererText()
+        column = gtk.TreeViewColumn('Text', renderer, markup=1)
+        column.set_clickable(False)
+        tree.append_column(column)
+        tree.columns_autosize()
+        tree.set_enable_search(False)
+        tree.grab_focus()
+
+        selection = tree.get_selection()
+        selection.connect("changed", self._packageSelected)
+        selection.set_mode(gtk.SELECTION_MULTIPLE)
+
+    def _categorySelected(self, selection):
+        if selection.count_selected_rows() != 1:
+            # If we have more packages (or no package) selected, then
+            # we can't show a description or allow selecting optional
+            self.__setCatDescription("Select %d rows" % selection.count_selected_rows(),
+                                     plaintext=True)
+            return
+
+        (model, paths) = selection.get_selected_rows()
+        cat = model.get_value(model.get_iter(paths[0]), 2)
+        if cat == "select_all":
+            if self.catModeArch.get_active():
+                txt =  "There are totally %d packages\n" % \
+                        len(self.packages.get_packages())
+            else:
+                txt =  "There are totally %d packagegroup packages\n" % \
+                        len(self.packages.get_packagegroup_packages())
+            self.__setCatDescription(txt, plaintext=True)
+            self._populatePackages(None)
+            return
+
+        self.__setCatDescription(cat)
+        self._populatePackages(cat, paths[0][0])
+
+    def _populatePackages(self, category, parent_path=None):
+        self.packagestore.clear()
+        if category is None:
+            return
+
+        if self.catModeArch.get_active():
+            self._populateArchPackage(category, parent_path)
+        else:
+            self._populatePackagegroupPackage(category, parent_path)
+
+        tree = self.xml.get_widget("packageList")
+        gobject.idle_add(lambda x: x.flags() & gtk.REALIZED and x.scroll_to_point(0, 0), tree)
+
+        # Select the 1st row
+        i = self.packagestore.get_iter_first()
+        if i is not None:
+            sel = self.xml.get_widget("packageList").get_selection()
+            sel.select_iter(i)
+
+    def _populateArchPackage(self, arch, parent_path):
+        for package in self.packages.get_arch_packages(arch):
+            s = "<span size=\"large\" weight=\"bold\">%s-%s@%s</span>" % \
+                    (package['pkg'], package['ver'], package['arch'])
+
+            package['parent_path'] = parent_path
+            self.packagestore.append(None,
+                                     [self.packages.get_selected(package['pkg'],
+                                                                 package['arch'],
+                                                                 package['ver']),
+                                      s,
+                                      package])
+
+    def _populatePackagegroupPackage(self, packagegroup, parent_path):
+        for pkg in packagegroup.get('Requires') or []:
+            for package in self.packages.get_available_package(pkg):
+                s = "<span size=\"large\" weight=\"bold\">%s-%s@%s</span>" % \
+                        (package['pkg'], package['ver'], package['arch'])
+
+                package['parent_path'] = parent_path
+                self.packagestore.append(None,
+                                         [self.packages.get_selected(package['pkg'],
+                                                                     package['arch'],
+                                                                     package['ver']),
+                                          s,
+                                          package])
+
+        for pkg in packagegroup.get('Recommends') or []:
+            for package in self.packages.get_available_package(pkg):
+                s = "<span size=\"large\" weight=\"bold\">%s-%s@%s(Recommends)</span>" % \
+                        (package['pkg'], package['ver'], package['arch'])
+
+                package['parent_path'] = parent_path
+                self.packagestore.append(None,
+                                         [self.packages.get_selected(package['pkg'],
+                                                                     package['arch'],
+                                                                     package['ver']),
+                                          s,
+                                          package])
+
+    def _packageSelected(self, selection):
+        if selection.count_selected_rows() != 1:
+            # if we have more packages (or no package) selected, then
+            # we can't show a description or allow selecting optional
+            self.__setPackageDescription("Select %d rows" % selection.count_selected_rows(),
+                                         plaintext=True)
+            return
+
+        (model, paths) = selection.get_selected_rows()
+        pkg = model.get_value(model.get_iter(paths[0]), 2)
+        self.__setPackageDescription(pkg)
+
+    def __FormatPackageDescription(self, pkg):
+        txt =  "Name: %s\n" % pkg['pkg']
+        txt += "Version: %s\n" % pkg['ver']
+        txt += "Arch: %s\n" % pkg['arch']
+        if 'des' in pkg:
+            txt += "Description:\n"
+            txt += "    %s\n" % pkg['des']
+
+        if 'Requires' in pkg:
+            txt += "\nRequires:\n"
+            for line in pkg['Requires']:
+                txt += "    %s\n" % line
+
+        if 'Recommends' in pkg:
+            txt += "\nRecommends:\n"
+            for line in pkg['Recommends']:
+                txt += "    %s\n" % line
+
+        if 'Provides' in pkg:
+            txt += "\nProvides:\n"
+            for line in pkg['Provides']:
+                if line == 'elf(buildid)':
+                    continue
+                txt += "    %s\n" % line
+
+        return txt
+
+    def __setPackageDescription(self, pkg, plaintext=False):
+        b = self.xml.get_widget("packageTextView").get_buffer()
+        b.set_text("")
+        if pkg is None:
+            return
+
+        if plaintext:
+            txt = pkg
+        else:
+            txt = self.__FormatPackageDescription(pkg)
+
+        b.set_text(txt)
+
+    def __setCatDescription(self, cat, plaintext=False):
+        b = self.xml.get_widget("categoryTextView").get_buffer()
+        b.set_text("")
+        if cat is None:
+            return
+
+        if plaintext:
+            txt = cat
+        elif self.catModeArch.get_active():
+            txt =  "There are totally %d packages with the arch of %s\n" % \
+                    (len(self.packages.get_arch_packages(cat)), cat)
+        else:
+            txt = self.__FormatPackageDescription(cat)
+
+        b.set_text(txt)
+
+    def _catRadioToggled(self, widget, path):
+        if widget.get_active():
+            self.populateCategory()
+
+    def _catToggled(self, widget, path):
+        log.info("PackageSelector: _catToggled %s, %s" % (widget.get_active(), path))
+
+        if type(path) == type(str):
+            i = self.catstore.get_iter_from_string(path)
+        else:
+            i = self.catstore.get_iter(path)
+
+        sel = not self.catstore.get_value(i, 0)
+        self.catstore.set_value(i, 0, sel)
+
+        self.vbox.window.set_cursor(gdk.Cursor(gdk.WATCH))
+
+        cat = self.catstore.get_value(i, 2)
+        # Process "select all"
+        if cat == "select_all":
+            self._categorySelectAll(sel)
+            self.vbox.window.set_cursor(None)
+            return
+
+        if self.catModeArch.get_active():
+            self.packages.set_arch_selected(sel, arch=cat)
+            self.select_arch[cat] = sel
+        else:
+            self.packages.set_packagegroup_selected(sel, packagegroup=cat)
+
+        self.__setCatDescription(cat)
+
+        self.vbox.window.set_cursor(None)
+
+    def _packageToggled(self, widget, path):
+        log.info("PackageSelector: _packageToggled %s, %s" % (widget.get_active(), path))
+
+        if type(path) == type(str):
+            i = self.packagestore.get_iter_from_string(path)
+        else:
+            i = self.packagestore.get_iter(path)
+
+        sel = not self.packagestore.get_value(i, 0)
+        self.packagestore.set_value(i, 0, sel)
+        pkg = self.packagestore.get_value(i, 2)
+
+        # The unselected package should cause parent unselected
+        if not sel:
+            i = self.catstore.get_iter(pkg['parent_path'])
+            self.catstore.set_value(i, 0, False)
+
+            if not self.catModeArch.get_active():
+                cat = self.catstore.get_value(i, 2)
+                self.packages.set_selected(cat['pkg'], cat['arch'], cat['ver'], False)
+
+
+        self.packages.set_selected(pkg['pkg'], pkg['arch'], pkg['ver'], sel)
+
+        self.vbox.window.set_cursor(gdk.Cursor(gdk.WATCH))
+        self.__setPackageDescription(pkg)
+        self.vbox.window.set_cursor(None)
+
+    def populateCategory(self):
+        self.catstore.clear()
+        # 1st row: "select all"
+        s = "<span size=\"large\" weight=\"bold\">select all</span>"
+        self.catstore.append(None, [False,s, "select_all"])
+
+        if self.catModeArch.get_active():
+            self._populateArchCategory()
+        else:
+            self._populatePackagegroupCategory()
+
+        # select the 2nd row to display
+        i = self.catstore.get_iter_first()
+        i = self.catstore.iter_next(i)
+        if i is not None:
+            sel = self.xml.get_widget("categoryList").get_selection()
+            sel.select_iter(i)
+
+
+    def _populatePackagegroupCategory(self):
+        # From 2nd row, it's packagegroup
+        for cat in self.packages.get_packagegroup_packages():
+            s = "<span size=\"large\" weight=\"bold\">%s-%s@%s</span>" % \
+                (cat['pkg'], cat['ver'], cat['arch'])
+            self.catstore.append(None,
+                                 [self.packages.get_selected(cat['pkg'],
+                                                             cat['arch'],
+                                                             cat['ver']),
+                                  s,
+                                  cat])
+
+    def _populateArchCategory(self):
+        # From 2nd row, it's arch
+        for arch in self.packages.get_archs():
+            s = "<span size=\"large\" weight=\"bold\">%s</span>" % arch
+            self.catstore.append(None, [self.select_arch[arch], s, arch])
+
+    def doRefresh(self):
+        self.populateCategory()
+
+    def _categorySelectAll(self, sel):
+        if self.catModeArch.get_active():
+            path = 1
+            # Update status of arch checkbox
+            for arch in self.select_arch:
+                self.select_arch[arch] = sel
+                i = self.catstore.get_iter(path)
+                self.catstore.set_value(i, 0, sel)
+                path += 1
+
+            self.packages.set_arch_selected(sel)
+        else:
+            # Update status of packagegroup checkbox
+            for path in range(1, len(self.packages.get_packagegroup_packages())+1):
+                i = self.catstore.get_iter(path)
+                self.catstore.set_value(i, 0, sel)
+
+            self.packages.set_packagegroup_selected(sel)
+
+        selection = self.xml.get_widget("categoryList").get_selection()
+        i = self.catstore.get_iter_first()
+        i = self.catstore.iter_next(i)
+        if i is not None:
+            sel = self.xml.get_widget("categoryList").get_selection()
+            sel.select_iter(i)
+
+    def getSelectedPackages(self):
+        ret = []
+        for package in self.packages.get_selected_packages():
+            pkg = "%s-%s@%s" % (package['pkg'], package['ver'], package['arch'])
+            ret.append(pkg)
+
+        log.info("getSelectedPackages %s" % ret)
+        return ret
+
-- 
1.9.1

