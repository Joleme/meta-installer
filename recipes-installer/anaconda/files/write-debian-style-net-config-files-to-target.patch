Index: anaconda-16.25/pyanaconda/network.py
===================================================================
--- anaconda-16.25.orig/pyanaconda/network.py
+++ anaconda-16.25/pyanaconda/network.py
@@ -709,7 +709,35 @@ class Network:
                 srcfile = os.path.join(netscriptsDir, cfgFile)
                 self._copyFileToPath(srcfile, instPath)
 
+    def copyConfigToPath_debian(self, instPath=''):
+        # /etc/hostname
+        self._copyFileToPath("/etc/hostname", instPath,
+                             overwrite=True)
+
+        # /etc/resolv.conf
+        self._copyFileToPath("/etc/resolv.conf", instPath,
+                             overwrite=True)
+
+        # /etc/udev/rules.d/70-persistent-net.rules
+        self._copyFileToPath("/etc/udev/rules.d/70-persistent-net.rules",
+                             instPath, overwrite=True)
+
+        # /etc/network/interfaces
+        # After copying the file to the target we reconstruct
+        # a basic interfaces file on the host. When reusing a vmdk
+        # image the presence of a valid interfaces file would makes
+        # NM ignore the interfaces listed there. This is transparent
+        # to the live USB image.
+        self._copyFileToPath("/etc/network/interfaces", instPath,
+                             overwrite=True)
+        f = open("/etc/network/interfaces", "w")
+        f.write("auto lo\niface lo inet loopback\n\n")
+        f.close()
+
     def copyConfigToPath(self, instPath=''):
+        self.copyConfigToPath_debian(instPath)
+        return
+
         if flags.imageInstall and instPath:
             # for image installs we only want to write out
             # /etc/sysconfig/network
@@ -757,8 +785,49 @@ class Network:
                     log.warning("disableNMForStorageDevices: %s file not found" %
                                 device.path)
 
+    def write_debian(self):
+        import ConfigParser
+        # /etc/resolv.conf is managed by NM
+
+        # /etc/hostname
+        f = open("/etc/hostname", "w")
+        if self.hostname:
+            f.write(self.hostname + "\n")
+        else:
+            f.write("localhost.localdomain\n")
+        f.close()
+
+        # /etc/network/interfaces
+        if not os.path.isdir("/etc/network"):
+            iutil.mkdirChain("/etc/network")
+        f = open("/etc/network/interfaces", "w")
+        f.write("auto lo\niface lo inet loopback\n\n")
+
+        con = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "con", "list"])
+        connames = [line for line in con.split('\n') if line.startswith('NAME')]
+        names = [line.split(':')[1].strip() for line in connames]
+        for name in names:
+            data = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "dev", "list", name])
+            device = data.split()[1]
+            entry = "auto {0}\niface {0} inet dhcp\n\n".format(device)
+            ifile = "/etc/NetworkManager/system-connections/"+name
+            if os.path.isfile(ifile):
+                config = ConfigParser.ConfigParser()
+                config.readfp(open(ifile))
+                if config.get("ipv4", "method") == "manual":
+                    entry = "auto {0}\niface {0} inet static\n".format(device)
+                    entry += "  address %s\n" % config.get("ipv4", "addresses1").split(";")[0]
+                    entry += "  gateway %s\n" % config.get("ipv4", "addresses1").split(";")[2]
+                    prefix = config.get("ipv4", "addresses1").split(";")[1]
+                    netmask = isys.prefix2netmask(int(prefix))
+                    entry += "  netmask %s\n\n" % netmask
+            f.write(entry)
+        f.close()
+
     def write(self):
         ifcfglog.debug("Network.write() called")
+        self.write_debian()
+        return
 
         # /etc/sysconfig/network
         if flags.imageInstall:
