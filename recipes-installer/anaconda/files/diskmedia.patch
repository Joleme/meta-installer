Index: b/pyanaconda/image.py
===================================================================
--- a/pyanaconda/image.py
+++ b/pyanaconda/image.py
@@ -195,17 +195,26 @@ def mountImage(isodir, tree, messageWind
 # Find an attached CD/DVD drive with media in it that contains packages,
 # and return that device name.
 def scanForMedia(tree, storage):
+    print "ROB: scanForMedia"
+
     for dev in storage.devicetree.devices:
-        if dev.type != "cdrom":
+        print "ROB: Iterating over dev %s" % dev
+	print "ROB: dev.type %s" % dev.type
+
+	if dev.type != "cdrom" and dev.type != "partition":
             continue
 
+        print "ROB: Checking dev %s" % dev
+
         storage.devicetree.updateDeviceFormat(dev)
         try:
             dev.format.mount(mountpoint=tree)
         except Exception:
             continue
 
+        print "ROB: about to verifyMedia"
         if not verifyMedia(tree):
+	    print "ROB: Unmount dev"
             dev.format.unmount()
             continue
 
@@ -235,7 +244,9 @@ def unmountCD(dev, messageWindow):
                           % (dev.path,))
 
 def verifyMedia(tree, timestamp=None):
+    print "ROB: verifyMedia start tree %s" % tree
     if os.access("%s/.discinfo" % tree, os.R_OK):
+	print "ROB: found %s/.discinfo" % tree
         f = open("%s/.discinfo" % tree)
 
         newStamp = f.readline().strip()
@@ -249,5 +260,7 @@ def verifyMedia(tree, timestamp=None):
         else:
             if arch == _arch:
                 return True
+    else:
+	print "ROB: did not find %s/.discinfo" % tree
 
     return False
Index: b/pyanaconda/yuminstall.py
===================================================================
--- a/pyanaconda/yuminstall.py
+++ b/pyanaconda/yuminstall.py
@@ -484,19 +484,25 @@ class AnacondaYum(yum.YumBase):
                 self.mediagrabber = self.mediaHandler
                 self._baseRepoURL = "file://%s" % self.tree
         else:
+	    print "ROB: No methodstr was given"
             # No methodstr was given.  In order to find an installation source,
             # we should first check to see if there's a CD/DVD with packages
             # on it, and then default to the mirrorlist URL.  The user can
             # always change the repo with the repo editor later.
             cdr = scanForMedia(self.tree, self.anaconda.storage)
             if cdr:
+		print "ROB: found cdr"
                 self.mediagrabber = self.mediaHandler
                 self.anaconda.mediaDevice = cdr
                 log.info("found installation media on %s" % cdr)
             else:
+		print "ROB: did not find cdr"
                 # No CD with media on it and no repo=/method= parameter, so
                 # default to using whatever's enabled in /etc/yum.repos.d/
                 self._baseRepoURL = None
+	print "self._baseRepoURL %s" % self._baseRepoURL
+	print "self.anaconda.methodstr %s" % self.anaconda.methodstr
+
 
     def configBaseRepo(self, root='/'):
         # Create the "base" repo object, assuming there is one.  Otherwise we
