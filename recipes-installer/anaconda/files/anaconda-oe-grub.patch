bootloader.py: Change 'grub2' settings to match oe-core

There is no 'grub2' package in oe-core, it's called 'grub'.  Adjust settings
to match this naming.  Also before writing out a variety of configuration
files, as necessary -- create the directories required.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Index: anaconda-16.25/pyanaconda/bootloader.py
===================================================================
--- anaconda-16.25.orig/pyanaconda/bootloader.py
+++ anaconda-16.25/pyanaconda/bootloader.py
@@ -940,6 +940,11 @@ class BootLoader(object):
             raise BootLoaderError("no config file defined for this bootloader")
 
         config_path = os.path.normpath(install_root + self.config_file)
+
+        config_dir = os.path.dirname(config_path)
+        if not os.path.isdir(config_dir):
+            os.mkdir(config_dir, 0755)
+
         if os.access(config_path, os.R_OK):
             os.rename(config_path, config_path + ".anacbak")
 
@@ -1220,6 +1225,11 @@ class GRUB(BootLoader):
     def write_device_map(self, install_root=""):
         """ Write out a device map containing all supported devices. """
         map_path = os.path.normpath(install_root + self.device_map_file)
+
+        map_dir = os.path.dirname(map_path)
+        if not os.path.isdir(map_dir):
+            os.mkdir(map_dir, 0755)
+
         if os.access(map_path, os.R_OK):
             os.rename(map_path, map_path + ".anacbak")
 
@@ -1474,10 +1484,10 @@ class GRUB2(GRUB):
 
     """
     name = "GRUB2"
-    packages = ["grub2"]
+    packages = ["grub"]
     obsoletes = ["grub"]
     _config_file = "grub.cfg"
-    _config_dir = "grub2"
+    _config_dir = "grub"
     config_file_mode = 0600
     defaults_file = "/etc/default/grub"
     can_dual_boot = True
@@ -1573,6 +1583,11 @@ class GRUB2(GRUB):
     def write_device_map(self, install_root=""):
         """ Write out a device map containing all supported devices. """
         map_path = os.path.normpath(install_root + self.device_map_file)
+
+        map_dir = os.path.dirname(map_path)
+        if not os.path.isdir(map_dir):
+            os.mkdir(map_dir, 0755)
+
         if os.access(map_path, os.R_OK):
             os.rename(map_path, map_path + ".anacbak")
 
@@ -1592,6 +1607,11 @@ class GRUB2(GRUB):
 
     def write_defaults(self, install_root=""):
         defaults_file = "%s%s" % (install_root, self.defaults_file)
+
+        defaults_dir = os.path.dirname(defaults_file)
+        if not os.path.isdir(defaults_dir):
+            os.mkdir(defaults_dir, 0755)
+
         defaults = open(defaults_file, "w+")
         defaults.write("GRUB_TIMEOUT=%d\n" % self.timeout)
         defaults.write("GRUB_DISTRIBUTOR=\"%s\"\n" % productName)
@@ -1624,7 +1644,7 @@ class GRUB2(GRUB):
         (pread, pwrite) = os.pipe()
         os.write(pwrite, "%s\n%s\n" % (self.password, self.password))
         os.close(pwrite)
-        buf = iutil.execWithCapture("grub2-mkpasswd-pbkdf2", [],
+        buf = iutil.execWithCapture("grub-mkpasswd-pbkdf2", [],
                                     stdin=pread,
                                     stderr="/dev/tty5",
                                     root=install_root)
@@ -1638,6 +1658,11 @@ class GRUB2(GRUB):
             return
 
         users_file = install_root + "/etc/grub.d/01_users"
+
+        users_dir = os.path.dirname(users_file)
+        if not os.path.isdir(users_dir):
+            os.mkdir(users_dir, 0755)
+
         header = open(users_file, "w")
         header.write("#!/bin/sh -e\n\n")
         header.write("cat << EOF\n")
@@ -1665,7 +1690,7 @@ class GRUB2(GRUB):
         # make sure the default entry is the OS we are installing
         entry_title = "%s Linux, with Linux %s" % (productName,
                                                    self.default.version)
-        rc = iutil.execWithRedirect("grub2-set-default",
+        rc = iutil.execWithRedirect("grub-set-default",
                                     [entry_title],
                                     root=install_root,
                                     stdout="/dev/tty5", stderr="/dev/tty5")
@@ -1682,7 +1707,7 @@ class GRUB2(GRUB):
             pass
 
         # now tell grub2 to generate the main configuration file
-        rc = iutil.execWithRedirect("grub2-mkconfig",
+        rc = iutil.execWithRedirect("grub-mkconfig",
                                     ["-o", self.config_file],
                                     root=install_root,
                                     stdout="/dev/tty5", stderr="/dev/tty5")
@@ -1702,7 +1727,7 @@ class GRUB2(GRUB):
                 # to install to a partition's boot block without --force.
                 args.insert(0, '--force')
 
-            rc = iutil.execWithRedirect("grub2-install", args,
+            rc = iutil.execWithRedirect("grub-install", args,
                                         stdout="/dev/tty5", stderr="/dev/tty5",
                                         root=install_root)
             if rc:
@@ -1976,6 +2001,11 @@ class SILO(YabootSILOBase):
 
     def write_message_file(self, install_root=""):
         message_file = os.path.normpath(install_root + self.message_file)
+
+        message_dir = os.path.dirname(message_file)
+        if not os.path.isdir(message_dir):
+            os.mkdir(message_dir, 0755)
+
         f = open(message_file, "w")
         f.write("Welcome to %s!\nHit <TAB> for boot options\n\n" % productName)
         f.close()
@@ -2031,6 +2061,8 @@ class SILO(YabootSILOBase):
 # anaconda-specific functions
 
 def writeSysconfigKernel(anaconda, default_kernel):
+    if not os.path.isdir(anaconda.rootPath + "/etc/sysconfig"):
+        os.mkdir(anaconda.rootPath + "/etc/sysconfig", 0755)
     f = open(anaconda.rootPath + "/etc/sysconfig/kernel", "w+")
     f.write("# UPDATEDEFAULT specifies if new-kernel-pkg should make\n"
             "# new kernels the default\n")
