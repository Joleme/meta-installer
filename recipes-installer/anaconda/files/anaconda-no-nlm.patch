Disable NLM and network setup

Workaround to avoid requireing the network manager while
we debug things using an NFS boot via QEMU.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Index: anaconda-16.25/pyanaconda/isys/__init__.py
===================================================================
--- anaconda-16.25.orig/pyanaconda/isys/__init__.py
+++ anaconda-16.25/pyanaconda/isys/__init__.py
@@ -291,6 +291,8 @@ def isIsoImage(file):
 
 # Return number of network devices
 def getNetworkDeviceCount():
+    return 0
+
     bus = dbus.SystemBus()
     nm = bus.get_object(NM_SERVICE, NM_MANAGER_PATH)
     devlist = nm.get_dbus_method("GetDevices")()
@@ -301,6 +303,8 @@ def getNetworkDeviceCount():
 # contains all device properties for all interfaces that NetworkManager knows
 # about.
 def getDeviceProperties(dev=None):
+    return None
+
     bus = dbus.SystemBus()
     nm = bus.get_object(NM_SERVICE, NM_MANAGER_PATH)
     devlist = nm.get_dbus_method("GetDevices")()
@@ -344,6 +348,8 @@ def getNetDevDesc(dev):
     from pyanaconda.baseudev import udev_get_device
     desc = "Network Interface"
 
+    return desc
+
     if dev == '' or dev is None:
         return desc
 
@@ -380,6 +386,8 @@ def isWirelessDevice(dev):
 # Returns list of ipv4 or ipv6 addresses, depending
 # on version parameter. ipv4 is default.
 def getIPAddresses(dev, version=4):
+    return None
+
     if dev == '' or dev is None:
        return None
 
Index: anaconda-16.25/pyanaconda/network.py
===================================================================
--- anaconda-16.25.orig/pyanaconda/network.py
+++ anaconda-16.25/pyanaconda/network.py
@@ -153,6 +153,7 @@ def nmIsConnected(state):
                      isys.NM_STATE_CONNECTED_GLOBAL)
 
 def hasActiveNetDev():
+    return False
     try:
         bus = dbus.SystemBus()
         nm = bus.get_object(isys.NM_SERVICE, isys.NM_MANAGER_PATH)
@@ -169,6 +170,8 @@ def hasActiveNetDev():
 # to follow suit here.  Also, if this uses a list now, we can think
 # about multihomed hosts during installation later.
 def getActiveNetDevs():
+    return list()
+
     active_devs = set()
 
     bus = dbus.SystemBus()
@@ -410,6 +413,8 @@ class Network:
         if flags.imageInstall:
             return
 
+        return
+
         # populate self.netdevices
         devhash = isys.getDeviceProperties(dev=None)
         for iface in devhash.keys():
@@ -803,25 +808,25 @@ class Network:
         f = open("/etc/network/interfaces", "w")
         f.write("auto lo\niface lo inet loopback\n\n")
 
-        con = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "con", "status"])
-        connames = [line for line in con.split('\n') if line.startswith('DEVICES')]
-        names = [line.split(':')[1].strip() for line in connames]
-        for name in names:
-            data = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "dev", "list", "iface", name])
-            device = data.split()[1]
-            entry = "auto {0}\niface {0} inet dhcp\n\n".format(device)
-            ifile = "/etc/NetworkManager/system-connections/"+name
-            if os.path.isfile(ifile):
-                config = ConfigParser.ConfigParser()
-                config.readfp(open(ifile))
-                if config.get("ipv4", "method") == "manual":
-                    entry = "auto {0}\niface {0} inet static\n".format(device)
-                    entry += "  address %s\n" % config.get("ipv4", "addresses1").split(";")[0]
-                    entry += "  gateway %s\n" % config.get("ipv4", "addresses1").split(";")[2]
-                    prefix = config.get("ipv4", "addresses1").split(";")[1]
-                    netmask = isys.prefix2netmask(int(prefix))
-                    entry += "  netmask %s\n\n" % netmask
-            f.write(entry)
+        #con = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "con", "status"])
+        #connames = [line for line in con.split('\n') if line.startswith('DEVICES')]
+        #names = [line.split(':')[1].strip() for line in connames]
+        #for name in names:
+        #    data = iutil.execWithCapture("/usr/bin/nmcli", ["-m", "multiline", "dev", "list", "iface", name])
+        #    device = data.split()[1]
+        #    entry = "auto {0}\niface {0} inet dhcp\n\n".format(device)
+        #    ifile = "/etc/NetworkManager/system-connections/"+name
+        #    if os.path.isfile(ifile):
+        #        config = ConfigParser.ConfigParser()
+        #        config.readfp(open(ifile))
+        #        if config.get("ipv4", "method") == "manual":
+        #            entry = "auto {0}\niface {0} inet static\n".format(device)
+        #            entry += "  address %s\n" % config.get("ipv4", "addresses1").split(";")[0]
+        #            entry += "  gateway %s\n" % config.get("ipv4", "addresses1").split(";")[2]
+        #            prefix = config.get("ipv4", "addresses1").split(";")[1]
+        #            netmask = isys.prefix2netmask(int(prefix))
+        #            entry += "  netmask %s\n\n" % netmask
+        #    f.write(entry)
         f.close()
 
     def write(self):
@@ -874,6 +879,8 @@ class Network:
     def waitForDevicesActivation(self, devices):
         waited_devs_props = {}
 
+        return waited_devs_props.keys()
+
         bus = dbus.SystemBus()
         nm = bus.get_object(isys.NM_SERVICE, isys.NM_MANAGER_PATH)
         device_paths = nm.get_dbus_method("GetDevices")()
@@ -901,6 +908,8 @@ class Network:
     # to bring the device up, watch NM state and return to the caller
     # once we have a state
     def waitForConnection(self):
+        return False
+
         bus = dbus.SystemBus()
         nm = bus.get_object(isys.NM_SERVICE, isys.NM_MANAGER_PATH)
         props = dbus.Interface(nm, isys.DBUS_PROPS_IFACE)
@@ -1009,6 +1018,9 @@ class Network:
 def getSSIDs(devices_to_scan=None):
 
     rv = {}
+
+    return rv
+
     bus = dbus.SystemBus()
     nm = bus.get_object(isys.NM_SERVICE, isys.NM_MANAGER_PATH)
     device_paths = nm.get_dbus_method("GetDevices")()
