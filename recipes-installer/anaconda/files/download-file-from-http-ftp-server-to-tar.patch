From d2638d466f5134a13d9aca3a5b614198f936e3b0 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 19 Jun 2015 16:54:47 +0800
Subject: [PATCH] support downloading file from http/ftp server to target image

Add key in kickstart to support downloading file from http/ftp server to target image,
'download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]'

Here is the example in kickstart file:
---start---
download --dest=/etc/rpm/keys/0x100001 --src=http://128.224.162.159/testkey
download --dest=file://etc/rpm/keys/0x100002 --src=http://128.224.162.159/testkey2
---end---

The file be download to target image (/mnt/image/****). For host image,
we could make use of "%pre" section with invoking shell to do that)

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 pyanaconda/__init__.py     |   3 ++
 pyanaconda/dispatch.py     |   2 +
 pyanaconda/installclass.py |   1 +
 pyanaconda/kickstart.py    | 103 +++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 109 insertions(+)

diff --git a/pyanaconda/__init__.py b/pyanaconda/__init__.py
index d092318..c4667d0 100644
--- a/pyanaconda/__init__.py
+++ b/pyanaconda/__init__.py
@@ -377,6 +377,9 @@ class Anaconda(object):
             f.write(self.ksdata.user.__str__())
             f.write(self.ksdata.services.__str__())
             f.write(self.ksdata.reboot.__str__())
+            if self.ksdata.download:
+                 f.write(self.ksdata.download.__str__())
+
 
         self.instLanguage.writeKS(f)
 
diff --git a/pyanaconda/dispatch.py b/pyanaconda/dispatch.py
index 466e262..0cf8fb2 100644
--- a/pyanaconda/dispatch.py
+++ b/pyanaconda/dispatch.py
@@ -45,6 +45,7 @@ from upgrade import upgradeMigrateFind
 from upgrade import findRootParts, queryUpgradeContinue
 from installmethod import doMethodComplete
 from kickstart import doKickstart, runPostScripts
+from kickstart import download
 from sshd import doSshd
 from rescue import doRescue
 
@@ -273,6 +274,7 @@ class Dispatcher(object):
         self.add_step("enablefilesystems", turnOnFilesystems)
         self.add_step("upgbootloader")
         self.add_step("bootloader")
+        self.add_step("download", download)
         self.add_step("reposetup", doBackendSetup)
         self.add_step("tasksel")
         self.add_step("basepkgsel", doBasePackageSelect)
diff --git a/pyanaconda/installclass.py b/pyanaconda/installclass.py
index 3a577e1..352162f 100644
--- a/pyanaconda/installclass.py
+++ b/pyanaconda/installclass.py
@@ -99,6 +99,7 @@ class BaseInstallClass(object):
 		 "network",
 		 "timezone",
 		 "accounts",
+                 "download",
                  "reposetup",
                  "basepkgsel",
 		 "tasksel",
diff --git a/pyanaconda/kickstart.py b/pyanaconda/kickstart.py
index 03a79bb..5efd0dd 100644
--- a/pyanaconda/kickstart.py
+++ b/pyanaconda/kickstart.py
@@ -915,6 +915,107 @@ class Reboot(commands.reboot.FC6_Reboot):
     def execute(self):
         self.anaconda.dispatch.skip_steps("complete")
 
+class DownloadData(BaseData):
+    removedKeywords = BaseData.removedKeywords
+    removedAttrs = BaseData.removedAttrs
+
+    def __init__(self, *args, **kwargs):
+        BaseData.__init__(self, *args, **kwargs)
+        self.dest = kwargs.get("dest", None)
+        self.src = kwargs.get("src", None)
+
+    def __eq__(self, y):
+        return self.dest == y.dest
+
+    def _getArgsAsStr(self):
+        retval = "--dest=%s --src=%s" % (self.dest, self.src)
+        return retval
+
+    def __str__(self):
+        retval = BaseData.__str__(self)
+        retval += "download %s\n" % self._getArgsAsStr()
+        return retval
+
+class Download(KickstartCommand):
+    removedKeywords = KickstartCommand.removedKeywords
+    removedAttrs = KickstartCommand.removedAttrs
+
+    def __init__(self, writePriority=0, *args, **kwargs):
+        KickstartCommand.__init__(self, writePriority, *args, **kwargs)
+        self.op = self._getParser()
+        self.downloadList = kwargs.get("downloadList", [])
+
+    def __str__(self):
+        retval = "# Download file from http/ftp server to target image\n"
+        retval += "# download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]\n"
+        for d in self.downloadList:
+            retval += d.__str__()
+        retval += "\n"
+        return retval
+
+    def _getParser(self):
+        op = KSOptionParser()
+        op.add_option("--dest", dest="dest", required=True)
+        op.add_option("--src", dest="src", required=True)
+        return op
+
+    def parse(self, args):
+        (opts, extra) = self.op.parse_args(args=args, lineno=self.lineno)
+        dd = self.handler.DownloadData()
+        self._setToObj(self.op, opts, dd)
+        dd.lineno = self.lineno
+
+        # Check for duplicates in the data list.
+        if dd in self.dataList():
+            warnings.warn(_("A source %s has already been defined.") % dd.src)
+
+        log.info("kickstart downloading %s to %s" % (opts.src, opts.dest))
+        return dd
+
+    def dataList(self):
+        return self.downloadList
+
+def download(anaconda):
+    if not anaconda.ksdata or not anaconda.ksdata.download:
+        return
+
+    for dd in anaconda.ksdata.download.downloadList:
+        if dd.dest.startswith("file:"):
+            dd.dest = dd.dest[len("file:"):]
+
+        if not dd.dest.startswith("/"):
+            msg = _("The dest %s is not on filesystem" % (dd.dest))
+            if anaconda.intf:
+                anaconda.intf.kickstartErrorWindow(msg)
+                sys.exit(1)
+            else:
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+        dest = anaconda.rootPath + dd.dest
+        log.info("downloading %s to %s" % (dd.src, dest))
+        dest_dir = os.path.dirname(dest)
+        if not os.path.exists(dest_dir):
+            os.makedirs(dest_dir)
+
+        try:
+            src_f = urlgrabber.urlopen(dd.src)
+        except urlgrabber.grabber.URLGrabError as e:
+            msg = _("The following error was encountered while downloading %s:\n\n%s" % (dd.src, e))
+            if anaconda.intf:
+                anaconda.intf.kickstartErrorWindow(msg)
+                sys.exit(1)
+            else:
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+        with open(dest, "w+") as dest_f:
+            dest_f.write(src_f.read())
+            dest_f.close()
+
+        src_f.close()
+
+
 class RaidData(commands.raid.F15_RaidData):
     def execute(self):
         raidmems = []
@@ -1199,6 +1300,7 @@ commandMap = {
         "xconfig": XConfig,
         "zfcp": ZFCP,
         "liveimg": Liveimg,
+        "download": Download,
 }
 
 dataMap = {
@@ -1207,6 +1309,7 @@ dataMap = {
         "PartData": PartitionData,
         "RaidData": RaidData,
         "VolGroupData": VolGroupData,
+        "DownloadData": DownloadData,
 }
 
 superclass = returnClassForVersion()
-- 
1.9.1

