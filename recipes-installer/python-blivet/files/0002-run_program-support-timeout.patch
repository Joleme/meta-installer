From f45ce1a42c1a9b6492be80d1d0bee297297855ce Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Fri, 22 Apr 2016 23:58:32 -0400
Subject: [PATCH 2/3] run_program support timeout

Upstream-Status: Pending

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 blivet/util.py | 52 ++++++++++++++++++++++++++++++++++------------------
 1 file changed, 34 insertions(+), 18 deletions(-)

diff --git a/blivet/util.py b/blivet/util.py
index 115ad35..c26c216 100644
--- a/blivet/util.py
+++ b/blivet/util.py
@@ -22,6 +22,30 @@ from threading import Lock
 # this will get set to anaconda's program_log_lock in enable_installer_mode
 program_log_lock = Lock()
 
+def timeout_command(argv, timeout, *args, **kwargs):
+    """call shell-command and either return its output or kill it
+    if it doesn't normally exit within timeout seconds and return None"""
+    import subprocess, datetime, os, time, signal
+    start = datetime.datetime.now()
+
+    try:
+        proc = subprocess.Popen(argv, *args, **kwargs)
+        while proc.poll() is None:
+            time.sleep(0.1)
+            now = datetime.datetime.now()
+            if (now - start).seconds> timeout:
+                os.kill(proc.pid, signal.SIGKILL)
+                os.waitpid(-1, os.WNOHANG)
+                program_log.debug("%d seconds timeout" % timeout)
+                return (-1, None)
+
+
+    except OSError as e:
+        program_log.error("Error running %s: %s", argv[0], e.strerror)
+        raise
+
+    program_log.debug("Return code: %d", proc.returncode)
+    return (proc.returncode, proc.stdout.read())
 
 def _run_program(argv, root='/', stdin=None, env_prune=None):
     if env_prune is None:
@@ -40,26 +64,18 @@ def _run_program(argv, root='/', stdin=None, env_prune=None):
         for var in env_prune:
             env.pop(var, None)
 
-        try:
-            proc = subprocess.Popen(argv,
-                                    stdin=stdin,
-                                    stdout=subprocess.PIPE,
-                                    stderr=subprocess.STDOUT,
-                                    close_fds=True,
-                                    preexec_fn=chroot, cwd=root, env=env)
-
-            out = proc.communicate()[0]
-            if out:
-                for line in out.splitlines():
-                    program_log.info("%s", line)
-
-        except OSError as e:
-            program_log.error("Error running %s: %s", argv[0], e.strerror)
-            raise
+        res, out = timeout_command(argv, 10,
+                              stdin=stdin,
+                              stdout=subprocess.PIPE,
+                              stderr=subprocess.STDOUT,
+                              close_fds=True,
+                              preexec_fn=chroot, cwd=root, env=env)
 
-        program_log.debug("Return code: %d", proc.returncode)
+        if out:
+            for line in out.splitlines():
+                program_log.info("%s", line)
 
-    return (proc.returncode, out)
+    return (res, out)
 
 def run_program(*args, **kwargs):
     return _run_program(*args, **kwargs)[0]
-- 
2.8.1

